<?php
/**
 * @file
 * Code for the Studio Programs feature.
 */

include_once 'studio_programs.features.inc';

/**
 * Implements hook_menu().
 * This is a very non-traditional use of hook_menu. Every time the menu is
 * rebuilt we:
 * - Create a new alias (if it doesnt already exist) for the taxonomy terms
 *   in the Sections vocabulary wihtin the context of the marketers/pulishers
 *   program examples.
 * - Create a coresponding menu link
 */
function studio_programs_menu() {
  module_load_include('inc', 'pathauto');

  // In reality, this is an atypical use of the menu_hook.
  $pages = array(
    'marketers' => array(
      'node' => node_load(11),
      'plid' => 1392,
    ),
    'publishers' => array(
      'node' => node_load(16),
      'plid' => 1397,
    ),
  );

  foreach($pages as $section => $page_info) {
    list($node, $plid) = array_values($page_info);
    foreach (taxonomy_get_tree(SECTIONS_VID, 0, NULL, TRUE) as $key => $term) {
      $path = 'node/' . $node->nid . '/' . $term->tid;
      $existing_alias = drupal_get_path_alias($path);

      if ($existing_alias === $path) {
        // This is a new alias. First create the menu item if it doesn't already
        // exist.
        $result = db_select('menu_links', 'ml')
          ->fields('ml', array('mlid'))
          ->condition('menu_name', 'main-menu')
          ->condition('link_path', $path)
          ->execute()
          ->fetchAssoc();
        if (empty($result)) {
          $item = array(
            'link_path' => $path,
            'link_title' => $term->name,
            'menu_name' => 'main-menu',
            'plid' => $plid,
          );
          menu_link_save($item);
        }

        // Now create the alias.
        $pattern = $section . '/[node:title]/[term:name]';
        $data = array(
          'node' => $node,
          'term' => $term
        );
        $alias = token_replace($pattern, $data, array(
          'sanitize' => FALSE,
          'clear' => TRUE,
          'callback' => 'pathauto_clean_token_values',
          'pathauto' => TRUE,
        ));

        $path = array(
          'source' => $path,
          'alias' => $alias
        );
        path_save($path);
      }
    }

    // Now we handle "all"
    $path = 'node/' . $node->nid;
    $result = db_update('url_alias')
      ->fields(array('source' => 'node/' . $node->nid . '/all'))
      ->condition('source', 'node/' . $node->nid)
      ->execute();

    $result = db_update('menu_links')
      ->fields(array('link_path' => 'node/' . $node->nid . '/all'))
      ->condition('mlid', $plid)
      ->execute();
  }
}




/**
 * Implementaion of hook_block_info().
 */
function studio_programs_block_info() {
  $blocks['global_services'] = array(
    'info' => t('Global Services'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implementation of hook_block_configure().
 */
function studio_programs_block_configure($delta) {
  $form = array();

  if ($delta == 'global_services') {
    $form['studio_programs_global_services_messaging'] = array(
      '#type' => 'textfield',
      '#title' => t('Messaging'),
      '#description' => t('The text to display on the "global services" block.'),
      '#default_value' => variable_get('studio_programs_global_services_messaging', ''),
    );
  }

  return $form;
}

/**
 * Implementation of hook_block_save().
 */
function studio_programs_block_save($delta, $edit) {
  switch ($delta) {
    case 'global_services':
      variable_set('studio_programs_global_services_messaging', $edit['studio_programs_global_services_messaging']);
      break;
  }
}

/**
 * Implementation of hook_block_view().
 */
function studio_programs_block_view($delta) {
  $block = array();

  switch ($delta) {
    case 'global_services' :
      $title = variable_get('studio_programs_global_services_messaging', '');

      $current_path_alias_parts = explode('/', drupal_lookup_path('alias', $_GET['q']));
      switch ($current_path_alias_parts[0]) {
        case 'publishers':
          $url = 'node/20';
          break;
        default:
          $url = 'node/25';
      }

      $block = array(
        'subject' => '',
        'content' => array(
          'link' => array(
            '#markup' => l($title, $url, array('attributes' => array('class' => array('messaging')))),
          ),
        ),
      );
      break;

  }

  return $block;
}

/**
 * Implements hook_view_alter().
 */
function studio_programs_block_view_alter(&$data, $block) {
  switch ($block->delta) {
    case md5('project_examples-featured_project_examples'):
    case 'project_examples-featured_project_examples':
      $blurb = variable_get('studio_programs_featured_project_examples_blurb', NULL);
      $blurb = is_array($blurb) ? check_markup($blurb['value'], $blurb['format']) : '';
      $data['content']['view'] = array('#markup' => $data['content']['#markup']);
      unset($data['content']['#markup']);
      $data['content']['blurb'] = array(
        '#type' => 'markup',
        '#weight' => -100,
        '#markup' => $blurb,
        '#theme_wrappers' => array('container'),
        '#attributes' => array('id' => 'studio_programs_featured_project_examples_blurb'),
      );
      break;

    case 'featured_items-block':
      $blurb = variable_get('studio_programs_featured_items_blurb', NULL);
      $blurb = is_array($blurb) ? check_markup($blurb['value'], $blurb['format']) : '';
      $data['content']['view'] = array('#markup' => $data['content']['#markup']);
      unset($data['content']['#markup']);
      $data['content']['blurb'] = array(
        '#type' => 'markup',
        '#weight' => -100,
        '#markup' => $blurb,
        '#theme_wrappers' => array('container'),
        '#attributes' => array('id' => 'studio_programs_featured_items_blurb'),
      );
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Adds a "blurb" field to the block config form for the
 * featured_project_examples block.
 */
function studio_programs_form_block_admin_configure_alter(&$form, &$form_state) {
  $module = arg(4);
  $delta = arg(5);

  switch ($delta) {
    case md5('project_examples-featured_project_examples'):
    case 'project_examples-featured_project_examples':
      $default_blurb = variable_get('studio_programs_featured_project_examples_blurb', array('value' => '', 'format' => filter_fallback_format()));
      $form['studio_programs_featured_project_examples_blurb'] = array(
        '#type' => 'text_format',
        '#title' => t('Blurb'),
        '#default_value' => $default_blurb['value'],
        '#format' => $default_blurb['format'],
        '#description' => t('The text entered here will be displayed just above this block.'),
        '#weight' => -1,
      );
      $form['#submit'][] = 'studio_programs_block_configure_form_save';
      break;

    case 'featured_items-block':
      $default_blurb = variable_get('studio_programs_featured_items_blurb', array('value' => '', 'format' => filter_fallback_format()));
      $form['studio_programs_featured_items_blurb'] = array(
        '#type' => 'text_format',
        '#title' => t('Blurb'),
        '#default_value' => $default_blurb['value'],
        '#format' => $default_blurb['format'],
        '#description' => t('The text entered here will be displayed next to the slideshow.'),
        '#weight' => -1,
      );
      $form['#submit'][] = 'studio_programs_block_configure_form_save';
      break;
  }
}

/**
 * Custom form submit for the featured_project_examples block's config form.
 */
function studio_programs_block_configure_form_save($form, &$form_state) {
  switch ($form_state['values']['delta']) {
    case md5('project_examples-featured_project_examples'):
    case 'project_examples-featured_project_examples':
      variable_set('studio_programs_featured_project_examples_blurb', $form_state['values']['studio_programs_featured_project_examples_blurb']);
      break;

    case 'featured_items-block':
      variable_set('studio_programs_featured_items_blurb', $form_state['values']['studio_programs_featured_items_blurb']);
      break;
  }
}



